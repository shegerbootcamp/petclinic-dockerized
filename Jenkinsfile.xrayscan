pipeline {
    agent any

    tools {
        //jfrog 'jfrog'
        maven 'Maven 3.9.5'
        jdk 'jdk8'
    }

    environment {
        DOCKER_IMAGE_NAME = "cloudsheger.jfrog.io/docker/petclinic:1.0"
		sonar_token = credentials('SONAR_TOKEN_ID') // SONAR_TOKEN_ID should be the ID of the Jenkins credentials storing your SonarQube token
    }

    parameters {
        string(name: 'ProjectKey', defaultValue: 'shared-lib', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'shared-lib', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://3.95.187.109:9000', description: 'SonarQube server URL')
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'main', url: 'https://github.com/cloudsheger/spring-petclinic-jenkins-pipeline-project.git'
            }
        }

        stage('Compile and Test') {
            steps {
                sh 'mvn clean install -DskipTests=true'
            }
        }

        stage('Sonar Static Code Analysis') {
            steps {
			 withCredentials([string(credentialsId: 'SONAR_TOKEN_ID', variable: 'sonar_token')]) {
                sh "mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=${projectKey} \
                    -Dsonar.projectName='${projectName}' \
                    -Dsonar.host.url=${sonarHostUrl} \
                    -Dsonar.login=${sonar_token}"
                }
            }
		}	

        stage('Build Docker image') {
            steps {
                script {
                    sh 'docker build -f docker-scan/app/Dockerfile -t $DOCKER_IMAGE_NAME .'
                }
            }
        }

        stage('Scan and Push Docker image') {
            steps {
                script {
                    dir('docker-scan/app/') {
                        // Scan Docker image for vulnerabilities
                        sh "jfrog docker scan $DOCKER_IMAGE_NAME"

                        // Push image to Artifactory
                        sh "docker push $DOCKER_IMAGE_NAME"
                    }
                }
            }
        }

        stage('Publish Build Info') {
            steps {
                script {
                    sh 'jf build-publish --build-name=my-build --build-number=1'
                }
            }
        }
    }
}
